# https://github.com/sharkdp/bat/blob/master/.github/workflows/CICD.yml
name: Release

env:
  MIN_SUPPORTED_RUST_VERSION: "1.60.0"
  CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  ensure_cargo_fmt:
    name: Ensure 'cargo fmt' has been run
    runs-on: ubuntu-20.04
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        profile: minimal
        components: rustfmt
    - uses: actions/checkout@v3
    - run: cargo fmt -- --check

      # license_checks:
      #   name: License checks
      #   runs-on: ubuntu-20.04
      #   steps:
      #   - uses: actions/checkout@v3
      #     with:
      #       submodules: true # we especially want to perform license checks on submodules
      #   - run: tests/scripts/license-checks.sh

  min_version:
    name: Minimum supported rust version
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
        default: true
        profile: minimal # minimal component installation (ie, no documentation)
        components: clippy
    - name: Run clippy (on minimum supported rust version to prevent warnings we can't fix)
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets --all-features
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test

  documentation:
    name: Documentation
    runs-on: ubuntu-20.04
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        profile: minimal
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps --document-private-items --all-features

  build-and-release-bins:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-apple-darwin         , os: macos-10.15                   }
          - { target: x86_64-pc-windows-gnu       , os: windows-2019                  }
          - { target: x86_64-pc-windows-msvc      , os: windows-2019                  }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-20.04, use-cross: true }
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-20.04, use-cross: true }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Install Cross-Compilation Tools
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ matrix.target }}
      if: startsWith(matrix.os, 'ubuntu')  && !contains(matrix.target, '-musl')

    - name: Install cross for Musl
      uses: taiki-e/install-action@cross
      if: contains(matrix.target, '-musl')

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: build
        args: --release --target=${{ matrix.job.target }}

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: test
        args: --target=${{ matrix.job.target }}

    - name: run dynamics
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: run
        args: --target=${{ matrix.job.target }} --bin dynamics -- help

    - name: run abc
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: run
        args: --target=${{ matrix.job.target }} --bin abc -- help

    - name: Upload release binaries
      uses: taiki-e/upload-rust-binary-action@v1
      with:
        bin: abc,dynamics
        ref: refs/tags/${{ needs.release-please.outputs.tag }}
        include: README.md
        archive: $bin-$tag-$target
        target: ${{ matrix.target }}
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        CARGO_PROFILE_RELEASE_LTO: true
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
        CARGO_PROFILE_RELEASE_STRIP: debuginfo

